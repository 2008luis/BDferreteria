-- MySQL Script generated by MySQL Workbench
-- Fri May 24 13:11:30 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema ferreteria
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ferreteria
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ferreteria` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `ferreteria` ;

-- -----------------------------------------------------
-- Table `ferreteria`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`cliente` (
  `id_Cliente` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(30) NULL DEFAULT NULL,
  `Apellido` VARCHAR(30) NULL DEFAULT NULL,
  `Telefono` VARCHAR(10) NULL DEFAULT NULL,
  `Cedula` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id_Cliente`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `ferreteria`.`rol`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`rol` (
  `id_rol` INT NOT NULL,
  `Nombre` VARCHAR(30) NULL DEFAULT NULL,
  PRIMARY KEY (`id_rol`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `ferreteria`.`empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`empleado` (
  `id_empleado` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(30) NULL DEFAULT NULL,
  `Apellido` VARCHAR(30) NULL DEFAULT NULL,
  `usuario` VARCHAR(10) NULL DEFAULT NULL,
  `clave` VARCHAR(12) NULL DEFAULT NULL,
  `estado` ENUM('activo', 'inactivo') NULL DEFAULT 'activo',
  `fk_rol` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_empleado`),
  INDEX `fk_rol` (`fk_rol` ASC) VISIBLE,
  CONSTRAINT `empleado_ibfk_1`
    FOREIGN KEY (`fk_rol`)
    REFERENCES `ferreteria`.`rol` (`id_rol`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `ferreteria`.`producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`producto` (
  `id_producto` INT NOT NULL AUTO_INCREMENT,
  `nombreProducto` VARCHAR(30) NULL DEFAULT NULL,
  `codigo` INT NULL DEFAULT NULL,
  `categoria` VARCHAR(30) NULL DEFAULT NULL,
  `precio` DOUBLE NULL DEFAULT NULL,
  `precioVenta` DOUBLE NULL DEFAULT NULL,
  `cantidad` INT NULL DEFAULT NULL,
  `estado` ENUM('activo', 'inactivo') NULL DEFAULT 'activo',
  PRIMARY KEY (`id_producto`))
ENGINE = InnoDB
AUTO_INCREMENT = 13
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `ferreteria`.`respaldoproducto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`respaldoproducto` (
  `idRespaldoProducto` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(30) NULL DEFAULT NULL,
  `fecha` DATETIME NULL DEFAULT NULL,
  `cant` INT NULL DEFAULT NULL,
  `precio_Unitario` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`idRespaldoProducto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `ferreteria`.`respaldoventa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`respaldoventa` (
  `id_respaldo` INT NOT NULL AUTO_INCREMENT,
  `nombrecliente` VARCHAR(30) NULL DEFAULT NULL,
  `fechaVenta` DATE NULL DEFAULT NULL,
  `productoVendido` VARCHAR(30) NULL DEFAULT NULL,
  `nombreEmpleado` VARCHAR(30) NULL DEFAULT NULL,
  PRIMARY KEY (`id_respaldo`))
ENGINE = InnoDB
AUTO_INCREMENT = 59
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `ferreteria`.`venta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`venta` (
  `id_venta` INT NOT NULL AUTO_INCREMENT,
  `nombreEmpleado` VARCHAR(30) NULL DEFAULT NULL,
  `nombreProducto` VARCHAR(30) NULL DEFAULT NULL,
  `cantidadVendida` INT NULL DEFAULT NULL,
  `nombreCliente` VARCHAR(30) NULL DEFAULT NULL,
  `nitCliente` VARCHAR(10) NULL DEFAULT NULL,
  `fechaVenta` DATE NULL DEFAULT NULL,
  `totalpagar` DOUBLE NULL DEFAULT NULL,
  `fkempleado` INT NULL DEFAULT NULL,
  `fkproducto` INT NULL DEFAULT NULL,
  `fkcliente` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_venta`),
  INDEX `fkcliente` (`fkcliente` ASC) VISIBLE,
  INDEX `fkempleado` (`fkempleado` ASC) VISIBLE,
  INDEX `fkproducto` (`fkproducto` ASC) VISIBLE,
  CONSTRAINT `venta_ibfk_1`
    FOREIGN KEY (`fkcliente`)
    REFERENCES `ferreteria`.`cliente` (`id_Cliente`),
  CONSTRAINT `venta_ibfk_2`
    FOREIGN KEY (`fkempleado`)
    REFERENCES `ferreteria`.`empleado` (`id_empleado`),
  CONSTRAINT `venta_ibfk_3`
    FOREIGN KEY (`fkproducto`)
    REFERENCES `ferreteria`.`producto` (`id_producto`))
ENGINE = InnoDB
AUTO_INCREMENT = 59
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `ferreteria` ;

-- -----------------------------------------------------
-- Placeholder table for view `ferreteria`.`vistaempleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ferreteria`.`vistaempleado` (`Vendedor` INT, `Ventas` INT, `Producto` INT, `Precio` INT, `TotalCantidadVendida` INT, `TotalRecaudado` INT);

-- -----------------------------------------------------
-- procedure VendedorRecaudo
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `VendedorRecaudo`(
     fechaInicio DATE,
     fechaFin DATE
)
BEGIN
SELECT 
        e.Nombre AS Vendedor,
        SUM(v.totalpagar) AS TotalRecaudadoPorVendedor
    FROM 
        venta v
        inner join empleado e on v.fkempleado =e.id_empleado
    WHERE 
        fechaVenta BETWEEN fechaInicio AND fechaFin
    GROUP BY 
         e.Nombre;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure activarProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `activarProducto`(
    pid_producto INT
)
BEGIN
    UPDATE producto
    SET estado = 'activo'
    WHERE id_producto = pid_producto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizarProducto`(
     pidProducto INT,
    pnuevaCantidad INT,
     pnuevoPrecio DOUBLE,
     pprecioVenta DOUBLE
)
BEGIN
    UPDATE producto 
    SET cantidad = pnuevaCantidad, 
        precio = pnuevoPrecio, 
        precioVenta = pprecioVenta 
    WHERE id_producto = pidProducto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregarProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregarProducto`(pnombreProducto  varchar(30) , pcodigo int, pcategoria  varchar(30),
 pprecio  double, pprecioVenta double, pcantidad int)
begin 
insert into producto (nombreProducto, codigo, categoria, precio, precioVenta, cantidad, estado)
values(pnombreProducto, pcodigo, pcategoria, pprecio, pprecioVenta, pcantidad,'activo');
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregarVenta
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregarVenta`(
    pnombreCliente VARCHAR(30),
    pnitCliente varchar(10),
    pnombreProducto VARCHAR(30),
	pcantidad int,
    pfechaVenta date,
    ptotalpagar DOUBLE,
	pnombreEmpleado VARCHAR(30),
    pfkempleado int,
    pfkcliente int


)
BEGIN
    DECLARE pfkproducto INT;
    declare pfkempleado int;
	DECLARE pprecioProducto DOUBLE;
    DECLARE ptotalpagar DOUBLE;

    SELECT id_producto INTO pfkproducto FROM producto WHERE nombreProducto = pnombreProducto;
	SELECT id_empleado INTO pfkempleado FROM empleado WHERE Nombre = pnombreEmpleado;
	SELECT precioVenta INTO pprecioProducto FROM producto WHERE nombreProducto = pnombreProducto;
   

    SET ptotalpagar = pprecioProducto * pcantidad;

    
    INSERT INTO venta (nombreEmpleado, nombreCliente, nitCliente, nombreProducto, cantidadVendida, fechaVenta, totalpagar,fkempleado, fkproducto,fkcliente)
    VALUES (pnombreEmpleado, pnombreCliente, pnitCliente, pnombreProducto, pcantidad, pfechaVenta, ptotalpagar, pfkempleado, pfkproducto, pfkcliente );

    UPDATE producto SET cantidad = cantidad - pcantidad WHERE nombreProducto = pnombreProducto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscar
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscar`(pcodigo int)
begin 
select nombreProducto, precio, precioVenta, cantidad from producto where codigo = pcodigo;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure busquedaCedula
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `busquedaCedula`(pcedula varchar(20)
)
begin
SELECT id_cliente, nombre, apellido, telefono FROM cliente WHERE cedula = pcedula;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- function calcular_total_recaudacion
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `calcular_total_recaudacion`(
    p_fechaInicio DATE,
    p_fechaFin DATE
) RETURNS double
    READS SQL DATA
    DETERMINISTIC
BEGIN
    DECLARE total_recaudacion DOUBLE;

    SELECT SUM(totalpagar) INTO total_recaudacion
    FROM venta
    WHERE fechaVenta BETWEEN p_fechaInicio AND p_fechaFin;

    RETURN total_recaudacion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure clienteMasCompra
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `clienteMasCompra`(
    p_fechaInicio DATE,
    p_fechaFin DATE
)
BEGIN
    SELECT nombreCliente as Cliente, COUNT(*) AS TotalCompras
    FROM venta
    WHERE fechaVenta BETWEEN p_fechaInicio AND p_fechaFin
    GROUP BY nombreCliente
    ORDER BY TotalCompras DESC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure comboProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `comboProducto`()
begin 
	select id_producto, nombreProducto from producto where estado = 'activo';
    end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure desactivarProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `desactivarProducto`(
    pid_producto INT
)
BEGIN
    UPDATE producto
    SET estado = 'inactivo'
    WHERE id_producto = pid_producto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure generalReporteRecaudacion
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `generalReporteRecaudacion`(
     fechaInicio DATE,
     fechaFin DATE
)
BEGIN

    SELECT 
        SUM(totalpagar) AS TotalRecaudadoGeneral
    FROM 
        venta
    WHERE 
        fechaVenta BETWEEN fechaInicio AND fechaFin;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure generarReporteVentas
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `generarReporteVentas`(
    fecha_inicio DATE,
     fecha_fin DATE
)
BEGIN
    SELECT 
        DATE(fechaVenta) AS fecha,
        SUM(totalpagar) AS total_ventas
    FROM 
        venta
    WHERE 
        fechaVenta BETWEEN fecha_inicio AND fecha_fin
    GROUP BY 
        DATE(fechaVenta)
    ORDER BY 
        DATE(fechaVenta);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ingreso_empleado
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ingreso_empleado`(pnombre varchar(30), pusuario  varchar(10), pclave  varchar(12), ptelefono  varchar(10))
begin
insert into empleado(Nombre, usuario, clave, telefono)
values(pnombre,usuario,clave,telefono);
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarEmpleados
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarEmpleados`()
begin 
select nombre, apellido from empleado;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarProductosInactivos
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarProductosInactivos`()
begin 
 select nombreProducto, codigo, categoria, cantidad, precioVenta from producto where estado = 'inactivo';
    end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrardatosProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrardatosProducto`()
begin 
	       select nombreProducto, codigo, categoria, cantidad, precioVenta from producto where estado = 'activo';
    end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCantidadPrecio
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `obtenerCantidadPrecio`(
     pnombreProducto VARCHAR(100)
)
BEGIN
select precioVenta,cantidad from producto where nombreProducto = pnombreProducto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCantidadProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `obtenerCantidadProducto`(
     pnombreProducto VARCHAR(100)
)
BEGIN
select cantidad from producto where nombreProducto = pnombreProducto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerVentasPorFecha
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `obtenerVentasPorFecha`(
     fechaInicio DATE,
     fechaFin DATE
)
BEGIN
         SELECT 
        nombreEmpleado, 
        nombreProducto, 
        cantidadVendida,
        nombreCliente, 
        nitCliente,
        fechaVenta,
        totalpagar
    FROM 
        venta
    WHERE 
        fechaventa  BETWEEN fechaInicio AND fechaFin;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obteneridProducto
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `obteneridProducto`(pnombreProducto varchar(30))
begin
select id_producto from producto where nombreProducto = pnombreProducto;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure productoMasVendido
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `productoMasVendido`()
begin 
SELECT nombreProducto, SUM(cantidadVendida) AS TotalVendido
FROM venta
GROUP BY nombreProducto
ORDER BY TotalVendido desc
LIMIT 1;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrarCLientes
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `registrarCLientes`(
pNombre varchar(30),
pApellido varchar(30),
pTelefono  varchar(10),
pCedula  varchar(10)
)
begin 
insert into cliente (Nombre, Apellido, Telefono, Cedula)
values(pNombre,pApellido,pTelefono,pCedula);
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrarEmpleados
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `registrarEmpleados`(
pnombre varchar(30),
pApellido varchar(30),
pusuario varchar(10),
pclave varchar(12),
pfk_rol int
)
begin
insert into empleado (nombre,Apellido,usuario,clave,fk_rol,estado)
values (pnombre,pApellido,pusuario,pclave,pfk_rol,'activo');
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure validarLogin
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `validarLogin`(pusuario varchar(30), pclave varchar(10)
)
BEGIN
select id_empleado, fk_rol from empleado where usuario =pusuario and clave = pclave;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure validarProductoExistente
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `validarProductoExistente`(
    pnombreProducto VARCHAR(40),
	pcodigo INT
)
BEGIN
    SELECT COUNT(*) AS total
    FROM producto 
    WHERE nombreProducto = pnombreProducto OR codigo = pcodigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure vendedorMasVentas
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `vendedorMasVentas`(
    p_fechaInicio DATE,
    p_fechaFin DATE
)
BEGIN
    SELECT nombreEmpleado AS Vendedor, COUNT(*) AS TotalVentas
    FROM venta
    WHERE fechaVenta BETWEEN p_fechaInicio AND p_fechaFin
    GROUP BY nombreEmpleado
    ORDER BY TotalVentas DESC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ventasEmpleado
-- -----------------------------------------------------

DELIMITER $$
USE `ferreteria`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ventasEmpleado`(
    pnombreEmpleado VARCHAR(30), 
    pfechaInicio DATE,
    pfechaFin DATE
)
BEGIN
    SELECT 
        v.nombreEmpleado AS Vendedor,
        COUNT(*) AS Ventas,
        p.nombreProducto AS Producto,
        p.precioVenta AS Precio,
        SUM(v.cantidadVendida) AS TotalCantidadVendida,
        SUM(v.totalpagar) AS TotalRecaudado
    FROM 
        venta v 
        INNER JOIN producto p ON v.fkproducto = p.id_producto
    WHERE 
        v.fechaVenta BETWEEN pfechaInicio AND pfechaFin
        AND v.nombreEmpleado = pnombreEmpleado
    GROUP BY 
        v.nombreEmpleado, p.nombreProducto, p.precioVenta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `ferreteria`.`vistaempleado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ferreteria`.`vistaempleado`;
USE `ferreteria`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `ferreteria`.`vistaempleado` AS select `v`.`nombreEmpleado` AS `Vendedor`,count(0) AS `Ventas`,`p`.`nombreProducto` AS `Producto`,`p`.`precioVenta` AS `Precio`,sum(`v`.`cantidadVendida`) AS `TotalCantidadVendida`,sum(`v`.`totalpagar`) AS `TotalRecaudado` from (`ferreteria`.`venta` `v` join `ferreteria`.`producto` `p` on((`v`.`fkproducto` = `p`.`id_producto`))) group by `v`.`nombreEmpleado`,`p`.`nombreProducto`,`p`.`precioVenta`;
USE `ferreteria`;

DELIMITER $$
USE `ferreteria`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `ferreteria`.`IngresoProducto`
AFTER INSERT ON `ferreteria`.`producto`
FOR EACH ROW
BEGIN
    INSERT INTO respaldoproducto (nombre, fecha, cant, precio_Unitario)
    VALUES (NEW.nombreProducto, now(), NEW.cantidad, new.precio);
END$$

USE `ferreteria`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `ferreteria`.`auditoria_venta`
AFTER INSERT ON `ferreteria`.`venta`
FOR EACH ROW
BEGIN
    INSERT INTO respaldoventa (nombrecliente, fechaVenta, productoVendido, nombreEmpleado)
    VALUES (NEW.nombreCliente, NEW.fechaVenta, NEW.nombreProducto, new.nombreEmpleado);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
